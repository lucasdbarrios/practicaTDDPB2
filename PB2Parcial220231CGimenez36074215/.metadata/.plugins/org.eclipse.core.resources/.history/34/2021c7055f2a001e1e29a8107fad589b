package ar.unlam.edu.ar;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

public class Empresa {

	private String nombre;
	private Map<Integer, Viaje> viajes;
	private Integer numeroViaje;

	// Se registran todas las ventas de pasajes de los pasajeros
	private Set<Ticket> tickets;

	public Empresa(String nombre) {
		this.nombre = nombre;
		this.viajes=new HashMap<>();
		this.tickets=new HashSet<>();
		this.numeroViaje=0;
	}

	public String getNombre() {
		return nombre;
	}

	public void setNombre(String nombre) {
		this.nombre = nombre;
	}

	public Map<Integer, Viaje> getViajes() {
		return viajes;
	}

	public void setViajes(Map<Integer, Viaje> viajes) {
		this.viajes = viajes;
	}

	/*
	 * Registra Un Nuevo viaje se debe guardar en un mapa donde la Key es un entero
	 * y es autoincremental arrancando de 0
	 */
	public void registrarViaje(Viaje viaje) throws ViajeExistenteException,TransporteException {
		if(viajes.containsKey(numeroViaje)) {
			throw new ViajeExistenteException();
		}
		
		viajes.put(numeroViaje, viaje);
		numeroViaje ++;
	}

	/*
	 * Registra Un ticket para carga TicketCarga.class 
	 * Si el viaje no admite Carga lanza TipoTicketInvalidoExcption
	 *  si supera El peso maximo que soporta el   medioTransprte Lanza Una exception CapacidadExcedidaException
	 */

	public Double registrarTicketcarga(Integer numeroViaje, Carga carga) throws ViajeInexistenteException, TransporteException {
		Viaje buscarviaje = buscarViaje(numeroViaje);
		if(!(buscarviaje.getMedioTransporte() instanceof TransporteCarga)){
			throw new TransporteException();
		}
		Ticket nuevoTiket = new TicketCarga(numeroViaje);
		return ((TicketCarga)nuevoTiket).ingresarcarga(carga.getPeso());

	}
	

	/*
	 * Se registra un TicketPasajero TicketPasajero 
	 * Si el viaje no admite pasajeros lanza TipoTicketInvalidoExcption 
	 * si supera la cantidad de pasajero que soporta el medioTransprte Lanza Una exception CantidadPasajeroSobrepasadaException
	 */

	public Boolean registrarTicketPasajero(Integer numeroViaje, Pasajero pasajero) throws TransporteException,ViajeInexistenteException, PasajeroExistenteException, TipoTicketInvalidoExcption, CantidadPasajeroSobrepasadaException {
			
		Viaje viajeBuscado = buscarViaje(numeroViaje);
		mediodeTransporteViajeCorrecto(viajeBuscado);
		hayEspacioParaRegistrarUnNuevoTicket(viajeBuscado);
		Ticket nuevoTiket = new TicketPasajero(numeroViaje);
		((TicketPasajero)nuevoTiket).ingresarPasajero(pasajero);
		
		return tickets.add(nuevoTiket);
		
	}
	

	private void hayEspacioParaRegistrarUnNuevoTicket(Viaje viajeBuscado) throws CantidadPasajeroSobrepasadaException {
		if(((ITransportable)(viajeBuscado.getMedioTransporte())).obtenerCantidadMaximaPasajero() >= cantidadDeVoletosVendidos()) {
			throw new CantidadPasajeroSobrepasadaException();
		}
		
	}

	private void mediodeTransporteViajeCorrecto(Viaje viajeBuscado) throws TipoTicketInvalidoExcption, CantidadPasajeroSobrepasadaException {
		if(!(viajeBuscado.getMedioTransporte() instanceof ITransportable)){
			throw new TipoTicketInvalidoExcption();
		}
		
	}

	private Integer cantidadDeVoletosVendidos() {
		// TODO Auto-generated method stub
		return viajes.size();
	}

	private Viaje buscarViaje(Integer numeroViaje) throws ViajeInexistenteException {
			if(!(viajes.containsKey(numeroViaje))) {
				throw new ViajeInexistenteException();
			}
			
			
		return viajes.get(numeroViaje);
	}

	/*
	 * Se registra un TicketMixto TicketMixto.class  
	 * si supera la cantidad de pasajero que soporta el medioTransprte Lanza Una exception CantidadPasajeroSobrepasadaException
	 * si supera El peso maximo que soporta el   medioTransprte Lanza Una exception CapacidadExcedidaException
	 */

	public void registrarTicketMixto(Integer numeroViaje, Pasajero pasajero,Carga carga) {
		// TODO Auto-generated method stub

	}


	
	
	
	
	
	
	/*
	 * retorna la lista de pasajero enforma Descendiente Lanza una exception si el
	 * viaje no existe o si el tipo de viaje No es compatible para trnssporte de
	 * pasajero lanza una exception si el viaje no existe
	 */

	public TreeSet<Pasajero> obtenerListaPasajeroOrdenadosPorDNIDescendiente(Integer numeroViaje) {

		return null;
	}

	public Double obtenerELTotalDeCargaTransportadaEnTodosLosViajes() {

		return null;
	}

}
